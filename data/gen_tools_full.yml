  - name: coq-aac-tactics.8.20.0
    source: https://github.com/coq-community/aac-tactics
    license: https://spdx.org/licenses/LGPL-3.0-or-later.html
    synopsis:  Coq tactics for rewriting universally quantified equations, modulo associative (and possibly commutative and idempotent) operators
    description: >
      This Coq plugin provides tactics for rewriting and proving universally quantified equations modulo associativity and commutativity of some operator, with idempotent commutative operators enabling additional simplifications. The tactics can be applied for custom operators by registering the operators and their properties as type class instances. Instances for many commonly used operators, such as for binary integer arithmetic and booleans, are provided with the plugin.
    lifecycle: full
  - name: coq-bignums.9.0.0+coq8.20
    source: https://github.com/coq-community/bignums
    license: https://spdx.org/licenses/LGPL-2.1-only.html
    synopsis:  Bignums, the Coq library of arbitrarily large numbers
    description: >
      This Coq library provides BigN, BigZ, and BigQ that used to be part of the standard library.
    lifecycle: full
  - name: coq-coqeal.2.0.3
    source: https://github.com/coq-community/coqeal
    license: https://spdx.org/licenses/MIT.html
    synopsis:  CoqEAL - The Coq Effective Algebra Library
    description: >
      This Coq library contains a subset of the work that was developed in the context of the ForMath EU FP7 project (2009-2013). It has two parts: - theory, which contains developments in algebra including normal forms of matrices,   and optimized algorithms on MathComp data structures. - refinements, which is a framework to ease change of data representations during a proof.
    lifecycle: full
  - name: coq-coqprime-generator.1.1.2
    source: https://github.com/thery/coqprime
    license: https://spdx.org/licenses/LGPL-2.1-only.html
    synopsis:  Certificate generator for prime numbers in Coq
    description: >
      
    lifecycle: full
  - name: coq-coqprime.1.6.0
    source: https://github.com/thery/coqprime
    license: https://spdx.org/licenses/LGPL-2.1-only.html
    synopsis:  Certifying prime numbers in Coq
    description: >
      
    lifecycle: full
  - name: coq-coquelicot.3.4.2
    source: http://coquelicot.saclay.inria.fr/
    license: https://spdx.org/licenses/LGPL-3.0-or-later.html
    synopsis:  A Coq formalization of real analysis compatible with the standard library
    description: >
      
    lifecycle: full
  - name: coq-corn.8.20.0
    source: https://github.com/coq-community/corn
    license: https://spdx.org/licenses/GPL-2.0.html
    synopsis:  The Coq Constructive Repository at Nijmegen
    description: >
      CoRN includes the following parts:  - Algebraic Hierarchy    An axiomatic formalization of the most common algebraic   structures, including setoids, monoids, groups, rings,   fields, ordered fields, rings of polynomials, real and   complex numbers  - Model of the Real Numbers    Construction of a concrete real number structure   satisfying the previously defined axioms  - Fundamental Theorem of Algebra    A proof that every non-constant polynomial on the complex   plane has at least one root  - Real Calculus    A collection of elementary results on real analysis,   including continuity, differentiability, integration,   Taylor'apos;s theorem and the Fundamental Theorem of Calculus  - Exact Real Computation    Fast verified computation inside Coq. This includes: real numbers, functions,   integrals, graphs of functions, differential equations.
    lifecycle: full
  - name: coq-dpdgraph.1.0+8.20
    source: https://github.com/coq-community/coq-dpdgraph
    license: https://spdx.org/licenses/LGPL-2.1-only.html
    synopsis:  Compute dependencies between Coq objects (definitions, theorems) and produce graphs
    description: >
      Coq plugin that extracts the dependencies between Coq objects, and produces files with dependency information. Includes tools to visualize dependency graphs and find unused definitions.
    lifecycle: full
  - name: coq-elpi.2.3.0
    source: https://github.com/LPCIC/coq-elpi
    license: https://spdx.org/licenses/LGPL-2.1-or-later.html
    synopsis:  Elpi extension language for Coq
    description: >
      Coq-elpi provides a Coq plugin that embeds ELPI. It also provides a way to embed Coq'apos;s terms into λProlog using the Higher-Order Abstract Syntax approach and a way to read terms back. In addition to that it exports to ELPI a set of Coq'apos;s primitives, e.g. printing a message, accessing the environment of theorems and data types, defining a new constant and so on. For convenience it also provides a quotation and anti-quotation for Coq'apos;s syntax in λProlog. E.g., `{{nat}}` is expanded to the type name of natural numbers, or `{{A -&gt;gt; B}}` to the representation of a product by unfolding the `-&gt;gt;` notation. Finally it provides a way to define new vernacular commands and new tactics.
    lifecycle: full
  - name: coq-equations.1.3.1+8.20
    source: https://mattam82.github.io/Coq-Equations
    license: https://spdx.org/licenses/LGPL-2.1-only.html
    synopsis:  A function definition package for Coq
    description: >
      Equations is a function definition plugin for Coq, that allows the definition of functions by dependent pattern-matching and well-founded, mutual or nested structural recursion and compiles them into core terms. It automatically derives the clauses equations, the graph of the function and its associated elimination principle.
    lifecycle: full
  - name: coq-ext-lib.0.13.0
    source: https://github.com/coq-community/coq-ext-lib
    license: https://spdx.org/licenses/BSD-2-Clause.html
    synopsis:  A library of Coq definitions, theorems, and tactics
    description: >
      A collection of theories and plugins that may be useful in other Coq developments.
    lifecycle: full
  - name: coq-flocq.4.2.0
    source: https://flocq.gitlabpages.inria.fr/
    license: https://spdx.org/licenses/LGPL-3.0-or-later.html
    synopsis:  A formalization of floating-point arithmetic for the Coq system
    description: >
      
    lifecycle: full
  - name: coq-gappa.1.5.5
    source: https://gappa.gitlabpages.inria.fr/
    license: https://spdx.org/licenses/LGPL-3.0-or-later.html
    synopsis:  A Coq tactic for discharging goals about floating-point arithmetic and round-off errors using the Gappa prover
    description: >
      
    lifecycle: full
  - name: coq-hammer-tactics.1.3.2+8.20
    source: https://github.com/lukaszcz/coqhammer
    license: https://spdx.org/licenses/LGPL-2.1-only.html
    synopsis:  Reconstruction tactics for the hammer for Coq
    description: >
      Collection of tactics that are used by the hammer for Coq to reconstruct proofs found by automated theorem provers. When the hammer has been successfully applied to a project, only this package needs to be installed; the hammer plugin is not required.
    lifecycle: full
  - name: coq-hammer.1.3.2+8.20
    source: https://github.com/lukaszcz/coqhammer
    license: https://spdx.org/licenses/LGPL-2.1-only.html
    synopsis:  General-purpose automated reasoning hammer tool for Coq
    description: >
      A general-purpose automated reasoning hammer tool for Coq that combines learning from previous proofs with the translation of problems to the logics of automated systems and the reconstruction of successfully found proofs.
    lifecycle: full
  - name: coq-hierarchy-builder.1.8.0
    source: https://github.com/math-comp/hierarchy-builder
    license: https://spdx.org/licenses/MIT.html
    synopsis:  High level commands to declare and evolve a hierarchy based on packed classes
    description: >
      Hierarchy Builder is a high level language to build hierarchies of algebraic structures and make these hierarchies evolve without breaking user code. The key concepts are the ones of factory, builder and abbreviation that let the hierarchy developer describe an actual interface for their library. Behind that interface the developer can provide appropriate code to ensure retro compatibility.
    lifecycle: full
  - name: coq-hott.8.20
    source: http://homotopytypetheory.org/
    license: https://spdx.org/licenses/BSD-2-Clause.html
    synopsis:  The Homotopy Type Theory library
    description: >
      To use the HoTT library, the following flags must be passed to coqc:   -noinit -indices-matter To use the HoTT library in a project, add the following to _CoqProject:   -arg -noinit   -arg -indices-matter
    lifecycle: full
  - name: coq-interval.4.11.1
    source: https://coqinterval.gitlabpages.inria.fr/
    license: https://spdx.org/licenses/CECILL-C.html
    synopsis:  A Coq tactic for proving bounds on real-valued expressions automatically
    description: >
      
    lifecycle: full
  - name: coq-iris-heap-lang.4.3.0
    source: https://iris-project.org/
    license: https://spdx.org/licenses/BSD-3-Clause.html
    synopsis:  The canonical example language for Iris
    description: >
      This package defines HeapLang, a concurrent lambda calculus with references, and uses Iris to build a program logic for HeapLang programs.
    lifecycle: full
  - name: coq-iris.4.3.0
    source: https://iris-project.org/
    license: https://spdx.org/licenses/BSD-3-Clause.html
    synopsis:  A Higher-Order Concurrent Separation Logic Framework with support for interactive proofs
    description: >
      Iris is a framework for reasoning about the safety of concurrent programs using concurrent separation logic. It can be used to develop a program logic, for defining logical relations, and for reasoning about type systems, among other applications. This package includes the base logic, Iris Proof Mode (IPM) / MoSeL, and a general language-independent program logic; see coq-iris-heap-lang for an instantiation of the program logic to a particular programming language.
    lifecycle: full
  - name: coq-itauto.8.20.0
    source: https://gitlab.inria.fr/fbesson/itauto
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Reflexive SAT solver with Nelson-Oppen support, parameterised by a leaf tactic inside Coq
    description: >
      itauto is a reflexive intuitionistic SAT solver parameterised by a theory module. When run inside Coq, the theory module wraps an arbitrary Coq tactic, e.g., the lia solver for linear arithmetic or the congruence solver for uninterpreted function symbols and constructors. Using a black-box Nelson-Oppen scheme for combination of theories, itauto also provides an SMT-like tactic for propositional reasoning modulo the solvers for both arithmetic and function symbols.
    lifecycle: full
  - name: coq-libhyps.3.0.1
    source: https://github.com/Matafou/LibHyps
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Hypotheses manipulation library
    description: >
      This library defines a set of tactics to manipulate hypothesis individually or by group. In particular it allows applying a tactic on each hypothesis of a goal, or only on *new* hypothesis after some tactic. Examples of manipulations: automatic renaming, subst, revert, or any tactic expecting a hypothesis name as argument.  It DOES NOT provide ANYMORE the especialize tactic to ease forward reasoning by instantianting one, several or all premisses of a hypothesis. Ths is due to coq'apos;s specialize being less permissive about evars. This may be fixed in the future.
    lifecycle: full
  - name: coq-math-classes.8.19.0
    source: https://github.com/coq-community/math-classes
    license: https://spdx.org/licenses/MIT.html
    synopsis:  A library of abstract interfaces for mathematical structures in Coq
    description: >
      Math classes is a library of abstract interfaces for mathematical structures, such as:  *  Algebraic hierarchy (groups, rings, fields, …) *  Relations, orders, … *  Categories, functors, universal algebra, … *  Numbers: N, Z, Q, … *  Operations, (shift, power, abs, …)  It is heavily based on Coq’s new type classes in order to provide: structure inference, multiple inheritance/sharing, convenient algebraic manipulation (e.g. rewriting) and idiomatic use of notations.
    lifecycle: full
  - name: coq-mathcomp-algebra-tactics.1.2.3
    source: https://github.com/math-comp/algebra-tactics
    license: https://spdx.org/licenses/CECILL-B.html
    synopsis:  Ring, field, lra, nra, and psatz tactics for Mathematical Components
    description: >
      This library provides `ring`, `field`, `lra`, `nra`, and `psatz` tactics for the Mathematical Components library. These tactics use the algebraic structures defined in the MathComp library and their canonical instances for the instance resolution, and do not require any special instance declaration, like the `Add Ring` and `Add Field` commands. Therefore, each of these tactics works with any instance of the respective structure, including concrete instances declared through Hierarchy Builder, abstract instances, and mixed concrete and abstract instances, e.g., `int * R` where `R` is an abstract commutative ring. Another key feature of Algebra Tactics is that they automatically push down ring morphisms and additive functions to leaves of ring/field expressions before applying the proof procedures.
    lifecycle: full
  - name: coq-mathcomp-algebra.2.3.0
    source: https://math-comp.github.io/
    license: https://spdx.org/licenses/CECILL-B.html
    synopsis:  Mathematical Components Library on Algebra
    description: >
      This library contains definitions and theorems about discrete (i.e. with decidable equality) algebraic structures : ring, fields, ordered fields, real fields,  modules, algebras, integers, rational numbers, polynomials, matrices, vector spaces...
    lifecycle: full
  - name: coq-mathcomp-analysis.1.8.0
    source: https://github.com/math-comp/analysis
    license: https://spdx.org/licenses/CECILL-C.html
    synopsis:  An analysis library for mathematical components
    description: >
      This package contains a library for real analysis for the Coq proof-assistant and using the Mathematical Components library.
    lifecycle: full
  - name: coq-mathcomp-bigenough.1.0.1
    source: https://github.com/math-comp/bigenough
    license: https://spdx.org/licenses/CECILL-B.html
    synopsis:  A small library to do epsilon - N reasoning
    description: >
      The package contains a package to reasoning with big enough objects (mostly natural numbers). This package is essentially for backward compatibility purposes as `bigenough` will be subsumed by the near tactics. The formalization is based on the Mathematical Components library.
    lifecycle: full
  - name: coq-mathcomp-character.2.3.0
    source: https://math-comp.github.io/
    license: https://spdx.org/licenses/CECILL-B.html
    synopsis:  Mathematical Components Library on character theory
    description: >
      This library contains definitions and theorems about group representations, characters and class functions.
    lifecycle: full
  - name: coq-mathcomp-field.2.3.0
    source: https://math-comp.github.io/
    license: https://spdx.org/licenses/CECILL-B.html
    synopsis:  Mathematical Components Library on Fields
    description: >
      This library contains definitions and theorems about field extensions, galois theory, algebraic numbers, cyclotomic polynomials...
    lifecycle: full
  - name: coq-mathcomp-fingroup.2.3.0
    source: https://math-comp.github.io/
    license: https://spdx.org/licenses/CECILL-B.html
    synopsis:  Mathematical Components Library on finite groups
    description: >
      This library contains definitions and theorems about finite groups, group quotients, group morphisms, group presentation, group action...
    lifecycle: full
  - name: coq-mathcomp-finmap.2.1.0
    source: https://github.com/math-comp/finmap
    license: https://spdx.org/licenses/CECILL-B.html
    synopsis:  Finite sets, finite maps, finitely supported functions
    description: >
      This library is an extension of mathematical component in order to support finite sets and finite maps on choicetypes (rather that finite types). This includes support for functions with finite support and multisets. The library also contains a generic order and set libary, which will be used to subsume notations for finite sets, eventually.
    lifecycle: full
  - name: coq-mathcomp-multinomials.2.3.0
    source: https://github.com/math-comp/multinomials
    license: https://spdx.org/licenses/CECILL-B.html
    synopsis:  A Multivariate polynomial Library for the Mathematical Components Library
    description: >
      
    lifecycle: full
  - name: coq-mathcomp-real-closed.2.0.2
    source: https://github.com/math-comp/real-closed
    license: https://spdx.org/licenses/CECILL-B.html
    synopsis:  Mathematical Components Library on real closed fields
    description: >
      This library contains definitions and theorems about real closed fields, with a construction of the real closure and the algebraic closure (including a proof of the fundamental theorem of algebra). It also contains a proof of decidability of the first order theory of real closed field, through quantifier elimination.
    lifecycle: full
  - name: coq-mathcomp-solvable.2.3.0
    source: https://math-comp.github.io/
    license: https://spdx.org/licenses/CECILL-B.html
    synopsis:  Mathematical Components Library on finite groups (II)
    description: >
      This library contains more definitions and theorems about finite groups.
    lifecycle: full
  - name: coq-mathcomp-ssreflect.2.3.0
    source: https://math-comp.github.io/
    license: https://spdx.org/licenses/CECILL-B.html
    synopsis:  Small Scale Reflection
    description: >
      This library includes the small scale reflection proof language extension and the minimal set of libraries to take advantage of it. This includes libraries on lists (seq), boolean and boolean predicates, natural numbers and types with decidable equality, finite types, finite sets, finite functions, finite graphs, basic arithmetics and prime numbers, big operators
    lifecycle: full
  - name: coq-mathcomp-word.3.2
    source: https://github.com/jasmin-lang/coqword
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Yet Another Coq Library on Machine Words
    description: >
      
    lifecycle: full
  - name: coq-mathcomp-zify.1.5.0+2.0+8.16
    source: https://github.com/math-comp/mczify
    license: https://spdx.org/licenses/CECILL-B.html
    synopsis:  Micromega tactics for Mathematical Components
    description: >
      This small library enables the use of the Micromega arithmetic solvers of Coq for goals stated with the definitions of the Mathematical Components library by extending the zify tactic.
    lifecycle: full
  - name: coq-menhirlib.20240715
    source: https://gitlab.inria.fr/fpottier/coq-menhirlib
    license: https://spdx.org/licenses/LGPL-3.0-or-later.html
    synopsis:  A support library for verified Coq parsers produced by Menhir
    description: >
      
    lifecycle: full
  - name: coq-mtac2.1.4+8.20
    source: https://github.com/Mtac2/Mtac2
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Typed tactic language for Coq
    description: >
      
    lifecycle: full
  - name: coq-ott.0.34
    source: http://www.cl.cam.ac.uk/~pes20/ott/
    license: https://spdx.org/licenses/BSD-3-Clause.html
    synopsis:  Auxiliary Coq library for Ott, a tool for writing definitions of programming languages and calculi
    description: >
      Ott takes as input a definition of a language syntax and semantics, in a concise and readable ASCII notation that is close to what one would write in informal mathematics. It can then generate a Coq version of the definition, which requires this library.
    lifecycle: full
  - name: coq-paramcoq.1.1.3+coq8.20
    source: https://github.com/coq-community/paramcoq
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Plugin for generating parametricity statements to perform refinement proofs
    description: >
      A Coq plugin providing commands for generating parametricity statements. Typical applications of such statements are in data refinement proofs. Note that the plugin is still in an experimental state - it is not very user friendly (lack of good error messages) and still contains bugs. But it is usable enough to \translate\ a large chunk of the standard library.
    lifecycle: full
  - name: coq-quickchick.2.0.5
    source: https://github.com/QuickChick/QuickChick
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Randomized Property-Based Testing for Coq
    description: >
      A library for property-based testing in Coq.    - Combinators for testable properties and random generators.   - QuickChick plugin for running tests in a Coq session.   - Includes a mutation testing tool.
    lifecycle: full
  - name: coq-reglang.1.2.1
    source: https://github.com/coq-community/reglang
    license: https://spdx.org/licenses/CECILL-B.html
    synopsis:  Representations of regular languages (i.e., regexps, various types of automata, and WS1S) with equivalence proofs, in Coq and MathComp
    description: >
      This library provides definitions and verified translations between different representations of regular languages: various forms of automata (deterministic, nondeterministic, one-way, two-way), regular expressions, and the logic WS1S. It also contains various decidability results and closure properties of regular languages.
    lifecycle: full
  - name: coq-relation-algebra.1.7.11
    source: http://perso.ens-lyon.fr/damien.pous/ra/
    license: https://spdx.org/licenses/LGPL-3.0-or-later.html
    synopsis:  Relation Algebra and KAT in Coq
    description: >
      
    lifecycle: full
  - name: coq-simple-io.1.10.0
    source: https://github.com/Lysxia/coq-simple-io
    license: https://spdx.org/licenses/MIT.html
    synopsis:  IO monad for Coq
    description: >
      This library provides tools to implement IO programs directly in Coq, in a similar style to Haskell. Facilities for formal verification are not included.  IO is defined as a parameter with a purely functional interface in Coq, to be extracted to OCaml. Some wrappers for the basic types and functions in the OCaml Stdlib module are provided. Users are free to define their own APIs on top of this IO type.
    lifecycle: full
  - name: coq-stdpp.1.11.0
    source: https://gitlab.mpi-sws.org/iris/stdpp
    license: https://spdx.org/licenses/BSD-3-Clause.html
    synopsis:  An extended \Standard Library\ for Coq
    description: >
      The key features of this library are as follows:  - It provides a great number of definitions and lemmas for common data   structures such as lists, finite maps, finite sets, and finite multisets. - It uses type classes for common notations (like `∅`, `∪`, and Haskell-style   monad notations) so that these can be overloaded for different data structures. - It uses type classes to keep track of common properties of types, like it   having decidable equality or being countable or finite. - Most data structures are represented in canonical ways so that Leibniz   equality can be used as much as possible (for example, for maps we have   `m1 = m2` iff `∀ i, m1 !! i = m2 !! i`). On top of that, the library provides   setoid instances for most types and operations. - It provides various tactics for common tasks, like an ssreflect inspired   `done` tactic for finishing trivial goals, a simple breadth-first solver   `naive_solver`, an equality simplifier `simplify_eq`, a solver `solve_proper`   for proving compatibility of functions with respect to relations, and a solver   `set_solver` for goals involving set operations. - It is entirely dependency- and axiom-free.
    lifecycle: full
  - name: coq-unicoq.1.6+8.20
    source: https://github.com/unicoq/unicoq
    license: https://spdx.org/licenses/MIT.html
    synopsis:  An enhanced unification algorithm for Coq
    description: >
      
    lifecycle: full
  - name: eprover.3.1
    source: https://www.eprover.org
    license: Unknown
    synopsis:  E Theorem Prover
    description: >
      E is a theorem prover for first-order and higher-order logic with equality. It accepts a problem specification, typically consisting of a number of first-order clauses or formulas, and a conjecture, in clausal or full first-order/higher-order form. The system will then try to find a formal proof for the conjecture, assuming the axioms.
    lifecycle: full
  - name: gappa.1.4.1
    source: https://gitlab.inria.fr/gappa/gappa
    license: https://spdx.org/licenses/CECILL-2.1.html
    synopsis:  Tool intended for formally proving properties on numerical programs dealing with floating-point or fixed-point arithmetic
    description: >
      
    lifecycle: full
  - name: menhir.20240715
    source: http://gitlab.inria.fr/fpottier/menhir
    license: https://spdx.org/licenses/GPL-2.0-only.html
    synopsis:  An LR(1) parser generator
    description: >
      
    lifecycle: full
  - name: ott.0.34
    source: http://www.cl.cam.ac.uk/~pes20/ott/
    license: https://spdx.org/licenses/BSD-3-Clause.html
    synopsis:  A tool for writing definitions of programming languages and calculi
    description: >
      Ott takes as input a definition of a language syntax and semantics, in a concise and readable ASCII notation that is close to what one would write in informal mathematics.  It generates output: - a LaTeX source file that defines commands to build a typeset version of the definition; - a Coq version of the definition; - a HOL version of the definition; - an Isabelle/HOL version of the definition; - a Lem version of the definition; - an OCaml version of the syntax of the definition. Additionally, it can be run as a filter, taking a LaTeX/Coq/Isabelle/HOL/Lem/OCaml source file with embedded (symbolic) terms of the defined language, parsing them and replacing them by typeset terms.
    lifecycle: full
  - name: sexplib.v0.16.0
    source: https://github.com/janestreet/sexplib
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Library for serializing OCaml values to and from S-expressions
    description: >
      Part of Jane Street'apos;s Core library The Core suite of libraries is an industrial strength alternative to OCaml'apos;s standard library that was developed by Jane Street, the largest industrial user of OCaml.
    lifecycle: full
  - name: z3_tptp.4.13.0
    source: https://github.com/Z3prover/z3
    license: https://spdx.org/licenses/MIT.html
    synopsis:  TPTP front end for Z3 solver
    description: >
      
    lifecycle: full
