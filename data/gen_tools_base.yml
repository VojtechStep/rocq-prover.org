  - name: coq.8.20.1
    source: https://coq.inria.fr/
    license: https://spdx.org/licenses/LGPL-2.1-only.html
    synopsis:  The Coq Proof Assistant
    description: >
      Coq is a formal proof management system. It provides a formal language to write mathematical definitions, executable algorithms and theorems together with an environment for semi-interactive development of machine-checked proofs.  Typical applications include the certification of properties of programming languages (e.g. the CompCert compiler certification project, or the Bedrock verified low-level programming library), the formalization of mathematics (e.g. the full formalization of the Feit-Thompson theorem or homotopy type theory) and teaching.
    lifecycle: base
  - name: dune-configurator.3.16.1
    source: https://github.com/ocaml/dune
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Helper library for gathering system configuration
    description: >
      dune-configurator is a small library that helps writing OCaml scripts that test features available on the system, in order to generate config.h files for instance. Among other things, dune-configurator allows one to: - test if a C program compiles - query pkg-config - import #define from OCaml header files - generate config.h file
    lifecycle: base
  - name: dune.3.16.1
    source: https://github.com/ocaml/dune
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Fast, portable, and opinionated build system
    description: >
      Dune is a build system that was designed to simplify the release of Jane Street packages. It reads metadata from \dune\ files following a very simple s-expression syntax.  Dune is fast, has very low-overhead, and supports parallel builds on all platforms. It has no system dependencies; all you need to build dune or packages using dune is OCaml. You don'apos;t need make or bash as long as the packages themselves don'apos;t use bash explicitly.  Dune is composable; supporting multi-package development by simply dropping multiple repositories into the same directory.  Dune also supports multi-context builds, such as building against several opam roots/switches simultaneously. This helps maintaining packages across several versions of OCaml and gives cross-compilation for free.
    lifecycle: base
